using System;
using System.Collections.Generic;
using System.Text;
using Likewise.LMC.AuthUtils;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

namespace Likewise.LMC.Krb5
{
    /// <summary>
    /// Errror codes returns for Kerberos authentication
    /// </summary>
    public enum Krb5ErrorCodes
    {
        KRB5_FCC_NOFILE = 196,
        KRB5_FCC_INTERNAL = 197
    }

    public class Krb5Wrapper
    {
        #region Class Data

        //Iniialization of kerebros ticket expiration time
        public static UInt32 KrbTicketExpiryTime = 0;     

        private static System.Object lockThis_InitKRB5 = new System.Object();

        #endregion

        #region public helper methods

        /// <summary>
        /// Used to initial call to Kerneros ticket expiration check
        /// And iniiailze and alternate kerberos cache path
        /// </summary>
        /// <param name="domainName"></param>
        /// <param name="hostname"></param>
        /// <returns></returns>
        public static UInt32 InitKerberos(string domainName, string hostname)
        {
            UInt32 ret = 0;
            UInt32 ticketExpiryTime = 0;
            string krb5HostName = string.Empty;
            string krb5CachePath = string.Empty;

            lock (lockThis_InitKRB5)
            {
                //Check for expired time if kerebros TGT
                if (Krb5TicketHasExpired())                
                    krb5HostName = string.Empty;              
                else
                    return ret;

                //hostname reinitailization to defualt domian that machine is joined
                krb5HostName = hostname;
                krb5HostName = string.Concat(krb5HostName, "$@", domainName).ToUpper();

                //Call to make keberos cache path for the application
                ret = Krb5GetSystemCachePath(out krb5CachePath);
                if (ret != 0)
                {
                    Logger.Log(string.Format("InitKRB5.Krb5GetSystemCachePath() returns ret={0} ", ret));
                }

                //Call to get the kerberos TGT from the cached kaytab
                ret = Krb5GetTGTFromKeytab(krb5HostName, null, krb5CachePath, out ticketExpiryTime);
                if (ret != 0)
                {
                    Logger.Log(string.Format("InitKRB5.Krb5GetTGTFromKeytab() returns ret={0} ", ret));
                }

                //set the expired time specified in kerberos as default
                KrbTicketExpiryTime = ticketExpiryTime;
            }

            return ret;
        }

        /// <summary>
        /// Check for cached kerberos expired time with the defualt specified time
        /// </summary>
        /// <returns></returns>
        public static bool Krb5TicketHasExpired()
        {
            bool bTiketExpired = false;

            if (KrbTicketExpiryTime == 0)
                bTiketExpired = true;
            else if (TimeSpan.Parse(KrbTicketExpiryTime.ToString()).TotalSeconds < PrivateKrb5Api.ExpiryGraceSeconds)
            {
                bTiketExpired = true;
            }

            return bTiketExpired;
        }

        /// <summary>
        /// Make and return the alternate cache path for kerberos keytab caching
        /// </summary>
        /// <param name="krb5CachePath"></param>
        /// <returns></returns>
        public static UInt32 Krb5GetSystemCachePath(out string krb5CachePath)
        {
            UInt32 ret = 0;           
           
            try
            {
                if (!(Directory.Exists(PrivateKrb5Api.ADMIN_CACHE_DIR)))
                {
                    Directory.CreateDirectory(PrivateKrb5Api.ADMIN_CACHE_DIR);
                }

                krb5CachePath = Path.Combine(PrivateKrb5Api.ADMIN_CACHE_DIR, PrivateKrb5Api.KRB5_CACHEPATH);
                if ((File.Exists(krb5CachePath)))
                {
                    File.Delete(krb5CachePath);
                }
                File.Create(krb5CachePath);
                krb5CachePath = string.Concat("FILE:", krb5CachePath);
               
                Logger.Log(string.Format("Krb5Wrapper.Krb5GetSystemCachePath krb5CachePath = {0} ", krb5CachePath));
            }
            catch (Exception ex)
            {
                ret = 1;
                krb5CachePath = string.Empty;
                Logger.LogException("Krb5Wrapper.Krb5GetSystemCachePath", ex);
            }

            return ret;
        }

        public static UInt32 Krb5GetTGTFromKeytab(string userName,
                                            string passWord,
                                            string krb5CachePath,
                                            out UInt32 ticketExpiryTime)
        {
            UInt32 ret = 0;
            IntPtr iRet = IntPtr.Zero;  //krb5_error_code
            IntPtr ctx = IntPtr.Zero;   //krb5_context
            KRB5API.krb5_creds creds = new KRB5API.krb5_creds();          

            IntPtr cc = IntPtr.Zero;    //krb5_ccache
            IntPtr keytab = IntPtr.Zero;//krb5_keytab
            IntPtr client_principal;    //krb5_principal  

            ticketExpiryTime = 0;
            KRB5API.krb5_creds stCreds = new KRB5API.krb5_creds();

            try
            {
                userName = "dc$@LIKEWISEADS.COM";

                ret = Kerb5DestroyCache(krb5CachePath);

                ret = PrivateKrb5Api.krb5_init_context(out ctx);
                Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_init_context(ctx = {0},iRet= {1}", ctx.ToString(), iRet.ToString()), Logger.Krb5LogLevel);
                if (iRet != IntPtr.Zero)
                {
                    ret = Convert.ToUInt32(iRet.ToInt32());
                    Logger.Log(string.Format("krb5_init_context returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                }

                iRet = PrivateKrb5Api.krb5_parse_name(ctx, userName, out client_principal);
                Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_parse_name(ctx = {0},userName ={1}, client_principal={2}, iRet= {3}", ctx.ToString(), userName, client_principal.ToString(), iRet.ToString()), Logger.Krb5LogLevel);
                if (iRet != IntPtr.Zero)
                {
                    ret = Convert.ToUInt32(iRet.ToInt32());
                    Logger.Log(string.Format("krb5_parse_name returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                }

                //if ((File.Exists(krb5CachePath.Substring(krb5CachePath.IndexOf(':')+1))))
                if (!String.IsNullOrEmpty(krb5CachePath))
                {
                    /* use krb5_cc_resolve to get an alternate cache */
                    iRet = PrivateKrb5Api.krb5_cc_resolve(ctx, krb5CachePath, ref cc);
                    Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_cc_resolve(ctx = {0},krb5CachePath= {1}, cc={2}", ctx.ToString(), krb5CachePath, cc.ToString()), Logger.Krb5LogLevel);
                    if (iRet != IntPtr.Zero)
                    {
                        //ret = Convert.ToUInt32(iRet.ToInt32());
                        Logger.Log(string.Format("krb5_cc_resolve returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                    }
                }
                else
                {
                    /* use krb5_cc_resolve to get an alternate cache */
                    iRet = PrivateKrb5Api.krb5_cc_default(ctx, ref cc);
                    Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_cc_default(ctx = {0}, cc={1}", ctx.ToString(), cc.ToString()), Logger.Krb5LogLevel);
                    if (iRet != IntPtr.Zero)
                    {
                        //ret = Convert.ToUInt32(iRet.ToInt32());
                        Logger.Log(string.Format("krb5_cc_resolve returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                    }
                }

                iRet = PrivateKrb5Api.krb5_kt_default(ctx, out keytab);
                Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_kt_default(ctx = {0},keytab= {1}, iRet= {2}", ctx.ToString(), keytab.ToString(), iRet.ToString()), Logger.Krb5LogLevel);
                if (iRet != IntPtr.Zero)
                {
                    ret = Convert.ToUInt32(iRet.ToInt32());
                    Logger.Log(string.Format("krb5_kt_default returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                }

                //iRet = PrivateKrb5Api.krb5_cc_default_name(ctx);
                //Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_cc_default_name(ctx = {0}, tRet= {1}", ctx.ToString(), iRet.ToString()), Logger.Krb5LogLevel);
                //if (iRet != IntPtr.Zero)
                //{
                //    //ret = Convert.ToUInt32(iRet.ToInt32());
                //    Logger.Log(string.Format("krb5_cc_default_name returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                //}                            

                iRet = PrivateKrb5Api.krb5_get_init_creds_keytab(
                                      ctx,
                                      ref creds,
                                      client_principal,
                                      keytab,
                                      0,
                                      null,
                                      IntPtr.Zero
                                      );
                Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_get_init_creds_keytab(ctx = {0},creds= {1}, client_principal= {2}, keytab= {3}, iRet= {4}", ctx.ToString(), creds.ToString(), client_principal.ToString(), keytab.ToString(), Convert.ToInt32(iRet.ToString()).ToString()), Logger.Krb5LogLevel);
                if (iRet != IntPtr.Zero)
                {
                    //ret = Convert.ToUInt32(iRet.ToInt32());
                    Logger.Log(string.Format("krb5_get_init_creds_keytab returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                }

                iRet = PrivateKrb5Api.krb5_cc_store_cred(ctx, cc, creds);
                Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_cc_store_cred(ctx = {0}, cc= {1}, creds= {2}, iRet= {3}", ctx.ToString(), cc.ToString(), creds.ToString(), iRet.ToString()), Logger.Krb5LogLevel);
                if (iRet != IntPtr.Zero)
                {
                    //ret = Convert.ToUInt32(iRet.ToInt32());
                    Logger.Log(string.Format("krb5_cc_store_cred returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                }

                //iRet = PrivateKrb5Api.krb5_cc_initialize(ctx, cc, client_principal);
                //Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_cc_initialize(ctx = {0}, cc= {1}, client_principal= {2}, iRet= {3}", ctx.ToString(), cc.ToString(), client_principal.ToString(), iRet.ToString()), Logger.Krb5LogLevel);
                //if (iRet != IntPtr.Zero)
                //{
                //    //ret = Convert.ToUInt32(iRet.ToInt32());
                //    Logger.Log(string.Format("krb5_cc_initialize returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                //}

                if (creds != null)
                {
                    KRB5API.krb5_times times = new KRB5API.krb5_times();
                    if (creds.times != null && creds.times != IntPtr.Zero)
                    {
                        Marshal.PtrToStructure(creds.times, times);
                        Logger.Log("Marshaling of stCreds.times successful", Logger.Krb5LogLevel);
                        ticketExpiryTime = Convert.ToUInt32(times.endtime.ToInt32());
                        Logger.Log("Marshaling of ticketExpiryTime successful", Logger.Krb5LogLevel);
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogException("Krb5Wrapper.Krb5GetTGTFromKeytab", ex);
            }

            return ret;
        }

        public static UInt32 Kerb5DestroyCache(string dirCachePath)
        {
            UInt32 ret = 0;
            IntPtr iRet = IntPtr.Zero;  //krb5_error_code
            IntPtr ctx;                 //krb5_context
            IntPtr cc = IntPtr.Zero;    //krb5_ccache

            ret = PrivateKrb5Api.krb5_init_context(out ctx);
            Logger.Log(string.Format("Krb5Wrapper.Kerb5DestroyCache.krb5_init_context(ctx = {0},iRet= {1}", ctx.ToString(),iRet.ToString()), Logger.Krb5LogLevel);
            if (iRet != IntPtr.Zero)
            {               
                //ret = Convert.ToUInt32(iRet.ToInt32());
                Logger.Log(string.Format("krb5_init_context returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
            }

            //if ((File.Exists(krb5CachePath.Substring(krb5CachePath.IndexOf(':')+1))))
            if (!String.IsNullOrEmpty(dirCachePath))
            {
                /* use krb5_cc_resolve to get an alternate cache */
                iRet = PrivateKrb5Api.krb5_cc_resolve(ctx, dirCachePath, ref cc);
                Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_cc_resolve(ctx = {0},krb5CachePath= {1}, cc={2}", ctx.ToString(), dirCachePath, cc.ToString()), Logger.Krb5LogLevel);
                if (iRet != IntPtr.Zero)
                {
                    //ret = Convert.ToUInt32(iRet.ToInt32());
                    Logger.Log(string.Format("krb5_cc_resolve returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                }
            }
            else
            {
                /* use krb5_cc_resolve to get an alternate cache */
                iRet = PrivateKrb5Api.krb5_cc_default(ctx, ref cc);
                Logger.Log(string.Format("Krb5Wrapper.Krb5GetTGTFromKeytab.krb5_cc_default(ctx = {0}, cc={1}", ctx.ToString(), cc.ToString()), Logger.Krb5LogLevel);
                if (iRet != IntPtr.Zero)
                {
                    //ret = Convert.ToUInt32(iRet.ToInt32());
                    Logger.Log(string.Format("krb5_cc_resolve returns non-zero ret value iRet= {0}", iRet.ToString()), Logger.Krb5LogLevel);
                }
            }

            iRet = PrivateKrb5Api.krb5_cc_destroy(ctx, cc);
            if (iRet != IntPtr.Zero)
            {
                if (iRet.ToInt32() != (int)Krb5ErrorCodes.KRB5_FCC_NOFILE)
                {
                    iRet = IntPtr.Zero;
                }               
            }

            if (ctx != IntPtr.Zero)
            {
                iRet = PrivateKrb5Api.krb5_free_context(ctx);
            }

            return ret;
        }
        
        #endregion

    }
}
