MODULES="core compiler autotools moonunit pkg-config likewise dceidl"
SUBDIRS=". libuuid lwbase lwmsg lwreg pstore lwadvapi netlogon \
         lwio libschannel dcerpc lwdns centutils lwsm eventlog lsass \
         srvsvc lwnetapi lwtools domainjoin config package"

lw_use_bundled()
{
    for _dep in ${LW_BUNDLED}
    do
        [ "$_dep" = "$1" ] && return 0
    done

    return 1
}

option()
{
    case "${MK_HOST_OS}" in
        linux)
            default_bundled="libuuid krb5 cyrus-sasl openldap sqlite openssl curl"
            ;;
        *)
            default_bundled="libiconv libuuid krb5 cyrus-sasl openldap sqlite openssl curl"
            ;;
    esac

    mk_option \
        OPTION=lw-bundled-libs \
        PARAM='...' \
        VAR=LW_BUNDLED \
        DEFAULT="$default_bundled" \
        HELP="Use bundled libraries"
}

configure()
{
    MK_MSG_DOMAIN="likewise-open"

    mk_export LW_VERSION="6.1.0"

    if [ -z "$MK_CFLAGS" ]
    then
        mk_export MK_CFLAGS="-O2 -g"
    fi

    mk_msg "configuring Likewise Open $LW_VERSION"
    mk_msg "using bundled libraries: $LW_BUNDLED"

    lw_use_bundled libuuid || mk_skip_subdir libuuid
}

make()
{
    # Handle building bundled 3rd-party dependencies

    lw_use_bundled libiconv && mk_autotools \
        SOURCEDIR=libiconv \
        HEADERS="iconv.h" \
        LIBS="iconv"

    lw_use_bundled krb5 && mk_autotools \
        SOURCEDIR=krb5/src \
        HEADERS='krb5.h gssapi.h' \
        LIBS='krb5 gssapi_krb5 k5crypto' \
        --enable-shared \
	--disable-pkinit \
        --without-tcl

    lw_use_bundled cyrus-sasl && mk_autotools \
        SOURCEDIR=cyrus-sasl \
        HEADERS='sasl/sasl.h' \
        LIBS='sasl2' \
	HEADERDEPS="gssapi.h" \
	LIBDEPS="gssapi_krb5" \
        -- \
        --with-configdir="${MK_LIBDIR}/sasl2" \
        --with-plugindir="${MK_LIBDIR}/sasl2" \
        --without-dblib \
        --without-saslauthd \
        --without-authdaemond \
        --disable-macos-framework \
        --disable-sample \
        --disable-cram \
        --disable-digest \
        --disable-otp \
        --disable-plain \
        --disable-anon \
        --enable-gss_mutexes \
        --disable-static \
        --enable-shared

    lw_use_bundled openldap && mk_autotools \
        SOURCEDIR=openldap \
        HEADERS='ldap.h' \
        LIBS='ldap ldap_r' \
        HEADERDEPS="gssapi.h sasl/sasl.h" \
        LIBDEPS="gssapi_krb5 sasl2" \
        CPPFLAGS="-D_REENTRANT -DLDAP_CONNECTIONLESS -D_GNU_SOURCE" \
        CFLAGS="-fPIC" \
        --disable-static \
        --enable-shared \
        --without-kerberos \
        --disable-slapd \
        --disable-slurpd \
        --without-tls

    lw_use_bundled sqlite && mk_autotools \
        SOURCEDIR=sqlite \
        HEADERS='sqlite3.h' \
        LIBS='sqlite3' \
        CPPFLAGS="-D_REENTRANT" \
        CFLAGS="-fPIC -fno-strict-aliasing"

    lw_use_bundled openssl && lw_openssl \
        SOURCEDIR=openssl \
        HEADERS="openssl/crypto.h openssl/md5.h openssl/rand.h openssl/hmac.h openssl/ssl.h openssl/md4.h openssl/rc4.h" \
        LIBS="ssl crypto"

    lw_use_bundled curl && mk_autotools \
        SOURCEDIR=curl \
        HEADERS="curl/curl.h" \
        LIBS="curl" \
        HEADERDEPS="openssl/ssl.h" \
        LIBDEPS="ssl" \
        --disable-ldap --disable-ldaps --disable-ftp \
        --disable-rtsp --disable-dict --disable-telnet \
        --disable-tftp --disable-pop3 --disable-imap \
        --disable-smtp
}

# OpenSSL can't be built with the usual mk_autotools stuff
lw_openssl()
{
    mk_push_vars SOURCEDIR LIBS HEADERS CPPFLAGS CFLAGS LDFLAGS suffix stamp item
    mk_parse_params

    suffix="${MK_SYSTEM%/*}_${MK_SYSTEM#*/}"

    mk_comment "OpenSSL ($MK_SYSTEM)"

    BUILDDIR="${SOURCEDIR}_${suffix}"
    mk_resolve_target "$BUILDDIR"
    mk_add_clean_target "$result"

    # Emit make target to configure OpenSSL
    mk_target \
        TARGET=".configure_openssl_${suffix}" \
        configure_openssl '$@' "&${BUILDDIR}" "&${SOURCEDIR}"

    # Emit make target to build OpenSSL
    mk_target \
        TARGET=".build_openssl_${suffix}" \
        DEPS="$result" \
        build_openssl '$@' "&${BUILDDIR}" '$(MAKE)'

    stamp="$result"

    # Include openssl in 'make all'
    mk_add_all_target "$stamp"

    # Allow 'make openssl'
    mk_target \
        TARGET="@openssl" \
        DEPS="$stamp"

    mk_add_phony_target "$result"

    # For each header/library that OpenSSL installs, we need to
    # emit a dummy target for it that depends on the build stamp file
    # in order to get make to do the right thing.  We also need to
    # tell MakeKit that we build it internally so subsequent configure
    # checks for it succeed.

    mk_unquote_list "$HEADERS"
    for item in "$@"
    do
        mk_target \
            TARGET="${MK_INCLUDEDIR}/$item" \
            DEPS="$stamp"

        mk_declare_internal_header "$item"
    done

    mk_unquote_list "$LIBS"
    for item in "$@"
    do
        mk_target \
            TARGET="${MK_LIBDIR}/lib${item}${MK_LIB_EXT}" \
            DEPS="$stamp"

        mk_declare_internal_library "$item"
    done

    mk_pop_vars
}

copy_openssl()
{
    # $1 = build directory
    # $2 = source directory

    MK_MSG_DOMAIN="copy"

    mk_msg "openssl ($MK_SYSTEM)"

    mk_safe_rm "$1"
    mk_run_or_fail cp -r "$2" "$1"
}

configure_openssl()
{
    # $1 = stamp file
    # $2 = build directory
    # $3 = source directory

    copy_openssl "$2" "$3"

    MK_MSG_DOMAIN="configure"

    case "${MK_OS}-${MK_SYSTEM#*/}" in
        *)
            host_string=""
            ;;
    esac

    old_pwd="$PWD"

    mk_cd_or_fail "$2"

    mk_msg "begin openssl ($MK_SYSTEM)"

    if [ -n "$host_string" ]
    then
        mk_run_quiet_or_fail \
            ./Configure \
            --prefix="${MK_PREFIX}" \
            shared \
            "$host_string"
    else
        mk_run_quiet_or_fail \
            ./config \
            --prefix="${MK_PREFIX}" \
            -d \
            shared
    fi

    mk_cd_or_fail "${old_pwd}"
    mk_run_or_fail touch "$1"

    mk_msg "end openssl ($MK_SYSTEM)"
}

build_openssl()
{
    # $1 = stamp file
    # $2 = build directory
    # $3 = make command

    MK_MSG_DOMAIN="build"

    old_pwd="$PWD"

    mk_cd_or_fail "$2"

    mk_msg "begin openssl ($MK_SYSTEM)"

    # OpenSSL does not cleanly build concurrently, so unset
    # environment variables that GNU make uses to pass
    # concurrency settings
    unset MAKE MFLAGS MAKEFLAGS
    export MAKE MFLAGS MAKEFLAGS

    mk_run_quiet_or_fail ${3} MAKE="$3" LIBDIR="${MK_LIBDIR}" CC="${MK_CC}"
    mk_run_quiet_or_fail ${3} MAKE="$3" LIBDIR="${MK_LIBDIR}" INSTALL_PREFIX="${MK_ROOT_DIR}/${MK_STAGE_DIR}" install_sw
    mk_cd_or_fail "$old_pwd"
    mk_run_or_fail touch "$1"

    mk_msg "end openssl ($MK_SYSTEM)"
}