/* Editor Settings: expandtabs and use 4 spaces for indentation
 * ex: set softtabstop=4 tabstop=8 expandtab shiftwidth=4: *
 * -*- mode: c, c-basic-offset: 4 -*- */

/*
 * Copyright (C) Centeris Corporation 2004-2007
 * Copyright (C) Likewise Software 2007
 * All rights reserved.
 *
 * Authors: Krishna Ganugapati (krishnag@likewisesoftware.com)
 *          Sriram Nambakam (snambakam@likewisesoftware.com)
 *          Kyle Stemen <kstemen@likewise.com>
 *
 * Eventlog IDL
 *
 * Permission to use, copy, modify, and distribute these interface
 * definitions for any purpose is hereby granted without fee.
 *
 * This work is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */
#ifndef __EVENTLOG_IDL__
#define __EVENTLOG_IDL__

#ifdef _WIN32
import "wtypes.idl";
#endif
[
    uuid(9956a31b-ec79-4818-9c63-c112689ae827),
    pointer_default(unique),
    version(1.0)
]


interface LwEventlog {

    cpp_quote("#ifndef __EVENTLOG_IDL__")
    cpp_quote("#define __EVENTLOG_IDL__")

#ifndef _DCE_IDL_

    cpp_quote("#ifdef _WIN32")

    cpp_quote("#ifndef TARGET_IS_NT50_OR_LATER")
    cpp_quote("#define TARGET_IS_NT50_OR_LATER TRUE")
    cpp_quote("#else")
    cpp_quote("#if !(TARGET_IS_NT50_OR_LATER)")
    cpp_quote("#undef TARGET_IS_NT50_OR_LATER")
    cpp_quote("#define TARGET_IS_NT50_OR_LATER TRUE")
    cpp_quote("#endif // false TARGET_IS_NT50_OR_LATER")
    cpp_quote("#endif // undefined TARGET_IS_NT50_OR_LATER")

    cpp_quote("#endif //_WIN32, !_WIN32")

    typedef [string] WCHAR* PWSTR;

#else //_DCE_IDL_

    cpp_quote("#if 0")
    #include <lw/types.h>
    cpp_quote("#else")
    cpp_quote("#include <lw/types.h>")
    cpp_quote("#endif //_0")

#endif //_DCE_IDL_

    cpp_quote("#if 0")
    #include "eventlog-record.h"
    cpp_quote("#else")
    cpp_quote("#include <eventlog-record.h>")
    cpp_quote("#endif //_0")

    typedef struct _LW_EVENTLOG_RECORD_LIST
    {
	DWORD Count;
	[size_is(Count)] LW_EVENTLOG_RECORD* pRecords;
    } LW_EVENTLOG_RECORD_LIST, *PLW_EVENTLOG_RECORD_LIST;

    cpp_quote("#ifndef RPC_LW_EVENTLOG_HANDLE_DEFINED")
#ifndef RPC_LW_EVENTLOG_HANDLE_DEFINED
#define RPC_LW_EVENTLOG_HANDLE_DEFINED
    typedef [context_handle] struct _RPC_LW_EVENTLOG_CONNECTION *RPC_LW_EVENTLOG_HANDLE;
#endif
    cpp_quote("#define RPC_LW_EVENTLOG_HANDLE_DEFINED")
    cpp_quote("#endif //RPC_LW_EVENTLOG_HANDLE_DEFINED")

    DWORD
    RpcEvtOpen(
        [in] handle_t BindingHandle,
        [out] RPC_LW_EVENTLOG_HANDLE *phEventlog
        );

    DWORD
    RpcEvtClose(
        [in, out] RPC_LW_EVENTLOG_HANDLE *phEventlog
        );

    DWORD
    RpcEvtGetRecordCount(
        [in] RPC_LW_EVENTLOG_HANDLE hEventlog,
        [in, unique, string] WCHAR * pSqlFilter,
        [out] DWORD * pNumMatched
        );

    DWORD
    RpcEvtReadRecords(
        [in] RPC_LW_EVENTLOG_HANDLE hEventlog,
        [in] DWORD MaxResults,
        [in, string] WCHAR * pSqlFilter,
        [out] LW_EVENTLOG_RECORD_LIST *pRecords
        );

    DWORD
    RpcEvtWriteRecords(
        [in] RPC_LW_EVENTLOG_HANDLE hEventlog,
        [in] DWORD Count,
        [in, size_is(Count)] LW_EVENTLOG_RECORD* pRecords
        );

    DWORD
    RpcEvtDeleteRecords(
        [in] RPC_LW_EVENTLOG_HANDLE hEventlog,
        [in, string] WCHAR *pSqlFilter
        );

    cpp_quote("#endif /* __LW_EVENTLOG_IDL__ */")
}

#endif /* __LW_EVENTLOG_IDL__ */

