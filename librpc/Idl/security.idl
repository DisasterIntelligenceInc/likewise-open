#ifndef _SECURITY_IDL_
#define _SECURITY_IDL_

cpp_quote("#ifndef _GEN_SECURITY_H_")
cpp_quote("#define _GEN_SECURITY_H_")

#include <lwrpc/phdef.h>
#include <lwrpc/siddef.h>
#include <lwrpc/sdflags.h>

/* Including header file in idl processing leads to providing
   enclosed definitions but losing preprocessor #defines at
   the same time. We're supplying them again here because defined
   macros are needed later when including public headers along
   with dceidl-generated files */

cpp_quote("#define WCHAR16_H")
cpp_quote("#define DEFINED_UINT32")
cpp_quote("#define NTSTATUS_DEFINED")
cpp_quote("#define WINERR_DEFINED")
cpp_quote("#define NTTIME_DEFINED")
cpp_quote("#define UNISTR_DEFINED")


typedef [switch_type(uint32)] union sec_ace_object_type {
	[case(SEC_ACE_OBJECT_TYPE_PRESENT)] Guid type;
} SecAceObjectType;

typedef [switch_type(uint32)] union sec_ace_object_inherited_type {
	[case(SEC_ACE_INHERITED_OBJECT_TYPE_PRESENT)] Guid inherited_type;
} SecAceObjectInheritedType;

typedef struct sec_ace_object {
	uint32 flags; /* security ace object flags */

	/* flags & SEC_ACE_OBJECT_TYPE_PRESENT  */
	[switch_is(flags)] SecAceObjectType type;                   
	/* flags & SEC_ACE_INHERITED_OBJECT_TYPE_PRESENT */
	[switch_is(flags)] SecAceObjectInheritedType inherited_type;
} SecAceObject;

typedef [switch_type(uint8)] union sec_ace_object_ctr {
	[case(SEC_ACE_TYPE_ACCESS_ALLOWED_OBJECT)] SecAceObject object_allowed;
	[case(SEC_ACE_TYPE_ACCESS_DENIED_OBJECT)] SecAceObject object_denied;
	[case(SEC_ACE_TYPE_SYSTEM_AUDIT_OBJECT)] SecAceObject object_audit;
	[case(SEC_ACE_TYPE_SYSTEM_ALARM_OBJECT)] SecAceObject object_alarm;
} SecAceObjectCtr;

/* Include the rest of public security descriptor definitions
   depending on SecAceObjectCtr */
#include <lwrpc/sddef.h>

cpp_quote("#endif /* _GEN_SECURITY_H_ */")


#endif /* _SECURITY_IDL_ */
